/**
 * Notification Bell JavaScript
 * Handles the notification bell icon in the GLPI interface
 */

// Fun√ß√£o para adicionar o sino de notifica√ß√µes √† interface
function addNotificationBell() {
    console.log('Tentando adicionar o sino de notifica√ß√µes...');
    
    // Verificar se o sino j√° existe
    if ($('.notification-bell').length > 0) {
        console.log('Sino j√° existe, n√£o adicionando novamente');
        return;
    }
    
    // Tentar v√°rias abordagens em sequ√™ncia
    let success = false;
    
    // 1. M√©todo padr√£o: campo de pesquisa global
    if (!success) {
        const global_search = $('input[name="globalsearch"], input.form-control-search, .search-input');
        if (global_search.length > 0) {
            console.log('Campo de pesquisa global encontrado:', global_search.length);
            let container = global_search.closest('.input-group');
            if (container.length === 0) {
                container = global_search.parent();
            }
            if (container.length > 0) {
                injectNotificationButton(global_search, container);
                success = true;
                console.log('Sino adicionado ao campo de pesquisa global');
            }
        }
    }
    
    // 2. FormCreator: tentar encontrar elementos espec√≠ficos do FormCreator
    if (!success) {
        const formcreatorHeader = $('.plugin_formcreator_userForm_header, .plugin_formcreator_header');
        if (formcreatorHeader.length > 0) {
            console.log('Cabe√ßalho do FormCreator encontrado');
            
            // Criar um cont√™iner para o sino e som
            const bellContainer = $('<div class="notification-container" style="margin-left: auto; margin-right: 15px; display: flex; align-items: center; gap: 5px;"></div>');
            const bellButton = getNotificationButton();
            const soundButton = getSoundToggleButton();
            
            bellContainer.append(bellButton);
            bellContainer.append(soundButton);
            
            // Adicionar ao cabe√ßalho do FormCreator
            formcreatorHeader.append(bellContainer);
            
            // Configurar eventos de clique
            setupBellEvents(bellContainer);
            success = true;
            console.log('Sino adicionado ao cabe√ßalho do FormCreator');
        }
    }
    
    // 3. Menu de usu√°rio no canto superior direito
    if (!success) {
        const userMenu = $('.navbar .navbar-nav:last-child, .navbar .ms-auto, header .navbar-nav:last-child, .user-menu');
        if (userMenu.length > 0) {
            console.log('Menu de usu√°rio encontrado');
            
            // Criar um novo item de menu para o sino
            const bellItem = $('<li class="nav-item" style="display: flex; align-items: center; gap: 5px; margin-right: 10px;"></li>');
            const bellButton = getNotificationButton();
            const soundButton = getSoundToggleButton();
            
            bellItem.append(bellButton);
            bellItem.append(soundButton);
            
            // Adicionar antes do menu de usu√°rio
            userMenu.prepend(bellItem);
            
            // Configurar eventos de clique
            setupBellEvents(bellItem);
            success = true;
            console.log('Sino adicionado ao menu de usu√°rio');
        }
    }
    
    // 4. Cabe√ßalho principal
    if (!success) {
        const header = $('header, .navbar, .main-header, #header_top, .top-bar');
        if (header.length > 0) {
            console.log('Cabe√ßalho principal encontrado');
            
            // Criar um cont√™iner para o sino
            const bellContainer = $('<div class="notification-container" style="margin-left: auto; margin-right: 15px; display: flex; align-items: center; gap: 5px;"></div>');
            const bellButton = getNotificationButton();
            const soundButton = getSoundToggleButton();
            
            bellContainer.append(bellButton);
            bellContainer.append(soundButton);
            
            // Adicionar ao cabe√ßalho
            header.first().append(bellContainer);
            
            // Configurar eventos de clique
            setupBellEvents(bellContainer);
            success = true;
            console.log('Sino adicionado ao cabe√ßalho principal');
        }
    }
    
    // 5. Interface simplificada (self-service)
    if (!success) {
        const selfServiceHeader = $('.navbar.self-service, .self-service .navbar, .self-service-header');
        if (selfServiceHeader.length > 0) {
            console.log('Cabe√ßalho da interface simplificada encontrado');
            
            // Criar um cont√™iner para o sino
            const bellContainer = $('<div class="notification-container" style="margin-left: auto; margin-right: 15px; display: flex; align-items: center; gap: 5px;"></div>');
            const bellButton = getNotificationButton();
            const soundButton = getSoundToggleButton();
            
            bellContainer.append(bellButton);
            bellContainer.append(soundButton);
            
            // Adicionar ao cabe√ßalho da interface simplificada
            selfServiceHeader.append(bellContainer);
            
            // Configurar eventos de clique
            setupBellEvents(bellContainer);
            success = true;
            console.log('Sino adicionado ao cabe√ßalho da interface simplificada');
        }
    }
    
    // 6. √öltimo recurso: adicionar como elemento flutuante
    if (!success) {
        console.log('Nenhum local adequado encontrado, adicionando sino flutuante');
        
        // Criar um cont√™iner flutuante para o sino
        const floatingBell = $(`
            <div class="floating-notification-container" style="
                position: fixed;
                top: 10px;
                right: 10px;
                z-index: 9999;
                display: flex;
                gap: 5px;
                background-color: #f8f9fa;
                padding: 5px;
                border-radius: 5px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            "></div>
        `);
        
        const bellButton = getNotificationButton();
        const soundButton = getSoundToggleButton();
        
        floatingBell.append(bellButton);
        floatingBell.append(soundButton);
        
        // Adicionar ao corpo da p√°gina
        $('body').append(floatingBell);
        
        // Configurar eventos de clique
        setupBellEvents(floatingBell);
        success = true;
        console.log('Sino adicionado como elemento flutuante');
    }
    
    if (!success) {
        console.error('N√£o foi poss√≠vel adicionar o sino de notifica√ß√µes em nenhum local');
    }
}

// Fun√ß√£o para obter o bot√£o de notifica√ß√£o
function getNotificationButton() {
    return $(`
        <div class="notification-bell-container" style="position: relative; display: inline-block;">
            <button type="button" class="notification-bell btn btn-outline-secondary" title="Notifica√ß√µes">
                <i class="fas fa-bell fa-lg"></i>
            </button>
            <span class="notification-badge hidden">0</span>
        </div>`);
}

// Fun√ß√£o para obter o bot√£o de toggle de som
function getSoundToggleButton() {
    const soundEnabled = getSoundEnabledState();
    const icon = soundEnabled ? 'fa-volume-up' : 'fa-volume-mute';
    const title = soundEnabled ? 'Desativar som de notifica√ß√µes' : 'Ativar som de notifica√ß√µes';
    return $(`
        <button type="button" class="sound-toggle btn btn-outline-secondary" title="${title}">
            <i class="fas ${icon} fa-lg"></i>
        </button>`);
}

// Fun√ß√£o para injetar o bot√£o de notifica√ß√£o
function injectNotificationButton(input_element, container = undefined) {
    if (input_element !== undefined && input_element.length > 0) {
        if (container !== undefined) {
            container.append(getNotificationButton());
            // Adicionar bot√£o de toggle de som ao lado do sino
            container.find('.notification-bell').after(getSoundToggleButton());
        } else {
            input_element.after(getNotificationButton());
            container = input_element.parent();
            // Adicionar bot√£o de toggle de som ao lado do sino
            container.find('.notification-bell').after(getSoundToggleButton());
        }
        // Configurar eventos de clique
        setupBellEvents(container);
    }
}

// M√©todo auxiliar para configurar eventos de clique
function setupBellEvents(container) {
    // Clique no sino abre o DROPDOWN
    container.find('.notification-bell').on('click', function(e) {
        e.preventDefault();
        console.log('üîî Clicou no sino - abrindo dropdown...');
        
        // Verificar se o dropdown existe
        if (window.NotificationDropdown && window.NotificationDropdown.toggle) {
            window.NotificationDropdown.toggle();
        } else {
            console.error('‚ùå Dropdown n√£o encontrado, redirecionando...');
            window.location.href = CFG_GLPI.root_doc + '/plugins/ticketanswers/front/index.php';
        }
    });
    
    container.find('.sound-toggle').on('click', function(e) {
        e.preventDefault();
        toggleNotificationSound();
    });
}

// Fun√ß√£o para alternar o som de notifica√ß√µes
function toggleNotificationSound() {
    // Obter o estado atual
    let soundEnabled = getSoundEnabledState();
    
    // Inverter o estado
    soundEnabled = !soundEnabled;
    
    // Atualizar o √≠cone e o t√≠tulo do bot√£o
    const button = $('.sound-toggle');
    const icon = button.find('i');
    
    if (soundEnabled) {
        icon.removeClass('fa-volume-mute').addClass('fa-volume-up');
        button.attr('title', 'Desativar som de notifica√ß√µes');
        // Tocar um som curto para confirmar que est√° ativado
        playTestSound();
    } else {
        icon.removeClass('fa-volume-up').addClass('fa-volume-mute');
        button.attr('title', 'Ativar som de notifica√ß√µes');
    }
    
    // Salvar prefer√™ncia no localStorage
    try {
        localStorage.setItem('ticketAnswersSoundEnabled', soundEnabled ? 'true' : 'false');
    } catch (e) {
        console.error('N√£o foi poss√≠vel salvar a prefer√™ncia de som:', e);
    }
    
    console.log('Som de notifica√ß√µes ' + (soundEnabled ? 'ativado' : 'desativado'));
}

// Fun√ß√£o para obter o estado atual do som
function getSoundEnabledState() {
    // Verificar se h√° uma prefer√™ncia salva no localStorage
    try {
        const savedSoundPreference = localStorage.getItem('ticketAnswersSoundEnabled');
        if (savedSoundPreference !== null) {
            return savedSoundPreference === 'true';
        }
    } catch (e) {
        console.error('Erro ao carregar prefer√™ncia de som:', e);
    }
    
    // Se n√£o houver prefer√™ncia salva, usar a configura√ß√£o global ou o padr√£o
    return window.ticketAnswersConfig && typeof window.ticketAnswersConfig.enableSound !== 'undefined'
        ? window.ticketAnswersConfig.enableSound
        : true; // Som habilitado por padr√£o
}

// Fun√ß√£o para tocar um som de teste
function playTestSound() {
    try {
        const audio = new Audio(CFG_GLPI.root_doc + '/plugins/ticketanswers/public/sound/notification.mp3');
        audio.volume = 0.2; // Volume mais baixo para o teste
        audio.play().catch(error => {
            console.error('Erro ao reproduzir som de teste:', error);
        });
    } catch (e) {
        console.error('Exce√ß√£o ao tentar tocar som de teste:', e);
    }
}

// Fun√ß√£o para tocar o som de notifica√ß√£o
function playNotificationSound() {
    console.log('üîä Tentando reproduzir som de notifica√ß√£o...');
    
    // Verificar se o som est√° habilitado
    const soundEnabled = getSoundEnabledState();
    console.log('üîä Som habilitado?', soundEnabled);
    
    if (!soundEnabled) {
        console.log('‚ùå Som de notifica√ß√£o desabilitado nas configura√ß√µes');
        return;
    }
    
    try {
        // Verificar se j√° tocou som recentemente (nos √∫ltimos 5 segundos)
        const now = Date.now();
        const lastPlayed = window.lastSoundPlayed || 0;
        
        if ((now - lastPlayed) < 5000) {
            console.log('‚è∏Ô∏è Som j√° tocado recentemente, ignorando');
            return;
        }
        
        window.lastSoundPlayed = now;
        
        // Criar um novo elemento de √°udio a cada vez
        const soundPath = CFG_GLPI.root_doc + '/plugins/ticketanswers/public/sound/notification.mp3';
        console.log('üîä Caminho do som:', soundPath);
        
        var audioElement = new Audio(soundPath);
        
        // Definir volume
        var volume = (window.ticketAnswersConfig && window.ticketAnswersConfig.soundVolume)
            ? window.ticketAnswersConfig.soundVolume / 100
            : 0.5;
        audioElement.volume = volume;
        console.log('üîä Volume configurado:', volume);
        
        // Tentar reproduzir
        var playPromise = audioElement.play();
        if (playPromise !== undefined) {
            playPromise.then(() => {
                console.log('‚úÖ Som de notifica√ß√£o tocado com sucesso!');
            }).catch(error => {
                console.error('‚ùå Erro ao tocar som de notifica√ß√£o:', error);
                console.error('Motivo:', error.message);
                console.error('‚ö†Ô∏è Poss√≠vel motivo: navegador bloqueou som sem intera√ß√£o do usu√°rio');
            });
        }
    } catch (e) {
        console.error('‚ùå Exce√ß√£o ao tentar tocar som:', e);
    }
}

// Adicionar estilos CSS necess√°rios
function addNotificationStyles() {
    console.log('Adicionando estilos CSS para notifica√ß√µes');
    
    const css = `
        /* Anima√ß√£o de balan√ßar o sino */
        @keyframes bell-shake {
            0% { transform: rotate(0); }
            5% { transform: rotate(15deg); }
            10% { transform: rotate(-15deg); }
            15% { transform: rotate(10deg); }
            20% { transform: rotate(-10deg); }
            25% { transform: rotate(5deg); }
            30% { transform: rotate(-5deg); }
            35% { transform: rotate(0); }
            100% { transform: rotate(0); }
        }
        
        /* Aplicar anima√ß√£o de balan√ßar */
        .notification-bell.animate-bell i {
            animation: bell-shake 2s ease-in-out;
            transform-origin: top center;
        }
        
        /* Anima√ß√£o de pulsar */
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        
        /* Aplicar anima√ß√£o de pulsar */
        .pulse-animation {
            animation: pulse 0.5s 3;
        }
        
        /* Estilos b√°sicos do sino */
        .notification-bell {
            position: relative;
        }
        
        /* Sino com notifica√ß√µes */
        .notification-bell .has-notifications,
        .notification-bell i.has-notifications {
            color: #ff0000 !important;
        }
        
        /* Indicador num√©rico */
        .notification-count {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color:rgb(236, 79, 17);
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 10px;
            font-weight: bold;
        }
        
        /* Indicador de som */
        .notification-bell.sound-disabled {
            opacity: 0.8;
        }
        
        .notification-bell.sound-disabled:after {
            content: '';
            position: absolute;
            bottom: 3px;
            right: 3px;
            width: 8px;
            height: 8px;
            background-color: #ccc;
            border-radius: 50%;
        }
        
        .notification-bell.sound-enabled:after {
            content: '';
            position: absolute;
            bottom: 3px;
            right: 3px;
            width: 8px;
            height: 8px;
            background-color: #4CAF50;
            border-radius: 50%;
        }
    `;
    
    $('<style>').prop('type', 'text/css').html(css).appendTo('head');
}


// Verificar se deve mostrar o sino
function shouldShowBell() {
    console.log('Verificando se deve mostrar o sino...');
    
    // Verificar se h√° uma configura√ß√£o expl√≠cita
    if (window.ticketAnswersConfig && typeof window.ticketAnswersConfig.showBellEverywhere !== 'undefined') {
        console.log('Configura√ß√£o expl√≠cita encontrada:', window.ticketAnswersConfig.showBellEverywhere);
        return window.ticketAnswersConfig.showBellEverywhere;
    }
    
    // Por padr√£o, mostrar o sino em todas as interfaces (incluindo self-service)
    return true;
}

// Fun√ß√£o para verificar notifica√ß√µes
function checkNotifications() {
    console.log('Verificando notifica√ß√µes...');
    
    // Armazenar o valor atual antes da verifica√ß√£o
    const previousCount = window.lastNotificationCount;
    const isFirstCheck = (typeof previousCount === 'undefined');
    
    $.ajax({
        url: CFG_GLPI.root_doc + '/plugins/ticketanswers/ajax/check_all_notifications.php',
        type: 'GET',
        dataType: 'json',
        success: (data) => {
            console.log('Notifica√ß√µes verificadas:', data);
            
            // Atualizar o contador visual
            const currentCount = data.combined_count || data.count || 0;
            updateNotificationCount(currentCount);
            
            // Verificar se h√° novas notifica√ß√µes (contagem atual > contagem anterior)
            // E N√ÉO for a primeira verifica√ß√£o (para evitar tocar som ao carregar a p√°gina)
            if (currentCount > previousCount && !isFirstCheck) {
                console.log('üîî NOVA NOTIFICA√á√ÉO DETECTADA! Anterior:', previousCount, 'Atual:', currentCount);
                
                // Aplicar a anima√ß√£o de pulso ao sino
                $('.notification-bell').addClass('animate-bell');
                setTimeout(() => {
                    $('.notification-bell').removeClass('animate-bell');
                }, 3000);
                
                // Tocar som de notifica√ß√£o
                console.log('üîä Chamando playNotificationSound()...');
                playNotificationSound();
            } else if (isFirstCheck) {
                console.log('‚úì Primeira verifica√ß√£o, apenas atualizando contador sem tocar som. Contagem:', currentCount);
            }
            
            // Armazena o n√∫mero atual de notifica√ß√µes para a pr√≥xima verifica√ß√£o
            window.lastNotificationCount = currentCount;
        },
        error: (xhr, status, error) => {
            console.error('Erro ao verificar notifica√ß√µes:', error);
        }
    });
}

// Fun√ß√£o para atualizar o contador de notifica√ß√µes
function updateNotificationCount(count) {
    // Garantir que count seja um n√∫mero v√°lido
    count = parseInt(count) || 0;
    
    console.log('Atualizando indicador de notifica√ß√µes no sino, contagem:', count);
    
    const bell = $('.notification-bell');
    const badge = $('.notification-badge');
    const bellIcon = bell.find('i');
    
    if (count > 0) {
        // Mostrar badge com contador
        badge.text(count > 99 ? '99+' : count);
        badge.removeClass('hidden');
        
        // Sino vermelho quando h√° notifica√ß√µes
        bell.removeClass('btn-outline-secondary').addClass('btn-danger');
        bellIcon.addClass('text-white has-notifications');
        
        console.log('Sino colorido de vermelho - h√°', count, 'notifica√ß√µes');
    } else {
        // Esconder badge
        badge.addClass('hidden');
        
        // Sino normal quando n√£o h√° notifica√ß√µes
        bell.removeClass('btn-danger').addClass('btn-outline-secondary');
        bellIcon.removeClass('text-white has-notifications');
        
        console.log('Sino normal - nenhuma notifica√ß√£o');
    }
}

// Inicializa√ß√£o
console.log('========== NOTIFICATION BELL SCRIPT LOADED ==========');

// Garantir que as fun√ß√µes estejam dispon√≠veis globalmente
window.addNotificationBell = addNotificationBell;
window.playNotificationSound = playNotificationSound;
window.checkNotifications = checkNotifications;

// Inicializar quando o documento estiver pronto
$(document).ready(function() {
    console.log('========== DOCUMENT READY TRIGGERED ==========');
    console.log('CFG_GLPI dispon√≠vel:', typeof CFG_GLPI !== 'undefined');
    
    // Verificar se o jQuery est√° funcionando corretamente
    console.log('jQuery vers√£o:', $.fn.jquery);
    
    // Verificar se elementos importantes existem
    console.log('Campo de pesquisa global:', $('input[name="globalsearch"], input.form-control-search, .search-input').length);
    console.log('Cabe√ßalho:', $('header, .navbar, .main-header, #header_top, .top-bar').length);
    
    // Adicionar estilos CSS
    addNotificationStyles();
    
    // Verificar se deve mostrar o sino
    if (shouldShowBell()) {
        // Adicionar o sino com um pequeno atraso para garantir que a p√°gina esteja carregada
        setTimeout(function() {
            try {
                addNotificationBell();
                
                // Verificar notifica√ß√µes imediatamente
                setTimeout(checkNotifications, 2000);
                
                // Configurar verifica√ß√£o peri√≥dica
                const checkInterval = (window.ticketAnswersConfig && window.ticketAnswersConfig.checkInterval) 
                    ? window.ticketAnswersConfig.checkInterval * 1000 
                    : 3000; // Padr√£o: 3 segundos
                
                console.log('Configurando verifica√ß√£o peri√≥dica a cada', checkInterval/1000, 'segundos');
                window.notificationInterval = setInterval(checkNotifications, checkInterval);
                
            } catch (e) {
                console.error('Erro ao adicionar sino de notifica√ß√µes:', e);
            }
        }, 1000);
        
        // Adicionar evento de intera√ß√£o inicial para "desbloquear" o √°udio
        $(document).one('click', function() {
            // Criar e reproduzir um √°udio silencioso para "desbloquear" a API de √°udio
            try {
                var unlockAudio = new Audio();
                unlockAudio.play().catch(function(e) {
                    console.log('√Åudio desbloqueado ap√≥s intera√ß√£o do usu√°rio');
                });
            } catch (e) {
                console.error('Erro ao desbloquear √°udio:', e);
            }
        });
    } else {
        console.log('Sino de notifica√ß√µes desativado para esta interface');
    }
});

